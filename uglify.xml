<?xml version="1.0" encoding="UTF-8" ?>
<compositor>
    <shader name="nightvision_vs" type="vertex">
        <source>
        <![CDATA[
        void main(void)
        {
           gl_Position = ftransform();
           gl_TexCoord[0] = gl_MultiTexCoord0;
        }
        ]]>
        </source>
    </shader>
    
    <shader name="nightvision_ps" type="fragment">
        <source>
        <![CDATA[
        uniform sampler2D sceneTex;
        uniform sampler1D bayerTex;
        uniform float viewportWidth;
        uniform float viewportHeight;
        uniform float osg_FrameTime;
        
        float threshold(ivec2 dim)
        {
        	vec2 xy = mod(vec2(dim), 8.0) / vec2(8.0, 64.0);
        	
        	vec4 c = texture1D(bayerTex, xy.x + xy.y) * 2.0;
        	 
        	return c.x / 64.0;
        }
        
        void main(void)
        {
           //int dirx = gl_FragCoord.s

	  /*int xs = 0 - int(ceil(mod(gl_FragCoord.x, 4.0)));
	  int ys = 0 - int(ceil(mod(gl_FragCoord.y, 4.0)));

	  vec4 blend = vec4(0.0, 0.0, 0.0, 0.0);

	  for (int i = xs; i < xs + 4; ++i)
	  {
	    for (int j = ys; j < ys + 4; ++j)
	    {
	      vec2 offset = vec2(float(i) / viewportWidth, float(j) / viewportHeight);
	      blend += texture2D(sceneTex, gl_TexCoord[0].st + offset); 
	    }
	  }

	  vec4 c = blend / 16.0;
	  c.w = 1.0;*/
	  
	  vec4 c = texture2D(sceneTex, gl_TexCoord[0].st);

	  /*float dirx = (1.0 - (ceil(mod(gl_FragCoord.x, 2.0)) * 2.0)) / viewportWidth;
           float diry = (1.0 - (ceil(mod(gl_FragCoord.y, 2.0)) * 2.0)) / viewportHeight;
           
           vec4 c1 = texture2D(sceneTex, gl_TexCoord[0].st);
           vec4 c2 = texture2D(sceneTex, gl_TexCoord[0].st + vec2(dirx, 0.0));
           vec4 c3 = texture2D(sceneTex, gl_TexCoord[0].st + vec2(0.0, diry));
           vec4 c4 = texture2D(sceneTex, gl_TexCoord[0].st + vec2(dirx, diry));
           
           vec4 c = vec4((c1.x + c2.x + c3.x + c4.x) / 4.0,
           		 (c1.y + c2.y + c3.y + c4.y) / 4.0,
           		 (c1.z + c2.z + c3.z + c4.z) / 4.0,
           		 1.0);
	  */
           
           /*float factor = osg_FrameTime * 100.0;
           vec2 uv = vec2(0.4*sin(factor), 0.4*cos(factor));
           vec3 n = texture2D(noiseTex, (gl_TexCoord[0].st*3.5) + uv).rgb;
           vec3 c = texture2D(sceneTex, gl_TexCoord[0].st + (n.xy*0.005)).rgb;
           float lum = dot(vec3(0.30, 0.59, 0.11), c);
           if (lum < 0.2) c *= brightness;
           
           //vec3 finalColor = (c + (n*0.2)) * vec3(0.1, 0.95, 0.2);*/
           
           
           float th = threshold(ivec2(gl_FragCoord.xy));
           
           c = floor((c + th) * 16.0) / 15.0;
           
           
           gl_FragColor = c;//vec4(tmp.r * 3.0, 0.0, 0.0, 1.0);//c;//vec4(gl_FragCoord.x, 0.0, gl_TexCoord[0].t, 1.0);
        }
        ]]>
        </source>
    </shader>
    
    <buffer name="sceneData" type="2d" width="512" height="512">
        <internal_format>rgba</internal_format>
        <source_format>rgba</source_format>
        <source_type>ubyte</source_type>
    </buffer>
    
    <buffer name="bayerMat" type="1d" width="64" relative_size="0">
    	<rawfile>bayer.raw</rawfile>
    	<internal_format>rgba</internal_format>
    	<source_format>rgba</source_format>
    	<source_type>ubyte</source_type>
    </buffer>
    
    <uniform name="viewportWidth" type="float"><inbuilt_value>viewport_width</inbuilt_value></uniform>
    <uniform name="viewportHeight" type="float"><inbuilt_value>viewport_height</inbuilt_value></uniform>
    
    <technique>
        <forward_pass name="NightVision_OriginalScene">
            <clear_color>0 0 0 1</clear_color>
            <output_buffer target="color">sceneData</output_buffer>
        </forward_pass>
        
        <deferred_pass name="NightVision_Final">
            <uniform>viewportWidth</uniform>
            <uniform>viewportHeight</uniform>
            <input_buffer unit="0" varname="sceneTex">sceneData</input_buffer>
            <input_buffer unit="1" varname="bayerTex">bayerMat</input_buffer>
            <shader>nightvision_vs</shader>
            <shader>nightvision_ps</shader>
        </deferred_pass>
    </technique>
</compositor>
